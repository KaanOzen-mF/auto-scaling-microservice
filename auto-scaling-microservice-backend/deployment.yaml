# Specifies the version of the Kubernetes API to use for creating this object.
# 'apps/v1' is the stable API version for workload resources like Deployment.
apiVersion: apps/v1

# Defines the type of Kubernetes resource to be created.
kind: Deployment

# Contains metadata that helps uniquely identify the Deployment object.
metadata:
  # The unique name for this Deployment within its namespace.
  name: product-service-deployment
  # Labels attached to the Deployment resource itself for organization and selection.
  labels:
    app: product-service

# The 'spec' (specification) section describes the desired state for this Deployment.
# This includes how many Pods to run, which container image to use, etc.
spec:
  # 'replicas' specifies the desired number of identical Pods to run.
  # The Deployment Controller will work to ensure this number of Pods is always running.
  replicas: 1
  # 'selector' defines how the Deployment finds which Pods to manage.
  selector:
    # 'matchLabels' specifies that this Deployment manages any Pod with all the listed labels.
    matchLabels:
      # This MUST exactly match the labels defined in the Pod template below (`spec.template.metadata.labels`).
      app: product-service
  # 'template' is the blueprint for the Pods that this Deployment will create and manage.
  template:
    # 'metadata' for the Pods themselves.
    metadata:
      # Labels to be applied to each Pod created by this Deployment.
      # The 'spec.selector.matchLabels' above uses these labels to identify the Pods.
      labels:
        app: product-service
    # 'spec' for the Pods, describing the desired state of each Pod.
    spec:
      # 'containers' is a list of containers to run inside each Pod.
      containers:
        # A single container definition.
        - name: product-service-container # The name of the container within the Pod.
          # The Docker image to use for this container. ':latest' tag is used.
          image: product-service:latest
          # 'imagePullPolicy' defines when Kubernetes should pull the image.
          # 'IfNotPresent' means the image is pulled only if it's not already on the node.
          # For Minikube with a locally built image, this (or 'Never') is appropriate.
          imagePullPolicy: IfNotPresent
          # Lists the network ports to expose from the container.
          ports:
            # The port number inside the container that the application listens on.
            - containerPort: 3000
          # 'resources' defines the CPU and memory resource requests and limits for the container.
          # This is critical for scheduling and for the Horizontal Pod Autoscaler (HPA) to work correctly.
          resources:
            # 'requests' specifies the minimum amount of resources the container is guaranteed to get.
            requests:
              # '100m' stands for 100 millicores, which is 0.1 of a CPU core.
              # The HPA uses this value to calculate utilization percentage.
              cpu: "100m"
              # '64Mi' requests 64 Mebibytes of memory.
              memory: "64Mi"
            # 'limits' specifies the maximum amount of resources the container can use.
            limits:
              # The container's memory usage cannot exceed 128 Mebibytes.
              # If it does, Kubernetes may terminate it (OOMKilled).
              memory: "128Mi"
